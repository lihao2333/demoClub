## 术语
#### checkpoint
* 存档点,将中途训练状态保存. 
* 可配置保存路径和间隔时间
* 默认保存路径在临时目录
* 通过git对checkpoint进行版本管理
#### "one hot vector"
* 每个向量之后一个非零向量

## "image process"
#### 归一化
* input=(x-mean)/std 
* 0-255->float
#### 编码
* image=sess.run(tf.image.decode_png(fi.read()))读取png图片并且解码
* fo.write(sess.run(tf.image.encode_jpeg(image)))输出为jpg格式图片

## "layer setup"
* conv=tf.layers.conv2d(inputs=xx,filters=32,kernel_size=[5,5],padding="same",activation=tf.nn.relu)
* pool=tf.layers.max_pooling2d(input=xx,pool_size=[2,2], strides=2) 
* dense=tf.layers.dense(input=xx,uints=1024,activation=tf.nn.relu)//全连接层
* dropout=tf.layers.droput(input=xx,rate=0.4,training=mode==tf.estimatro.ModeKeys.TRAIN)//在某些训练模式下,以0.4的概率丢弃值
* logits=tf.layers.dense(input=xx,uints=10)
## "tf.estimator.ModeKeys"
* 用来标志状态三种状态:TRAIN,EVAL(评估),PREDICT
## tf.one_hot
* tf.one_hot(indices=[0,1,2],depth=3,on_value=5.0,off_value=0.0,axis=-1) 产生一个4*3的矩阵,每一行的indices对应值为on_value,起于值为off_value

## 基本操作
#### 创建 
* t=tf.placeholder(tf.float32,shape=(1024,1024),name="input") x在Session.run,Tensor.eval,Operation.run的时候必须通过feed_dict来喂数据.类似于创建一种无内容的纯结构
* x=tf.Variable(2333,tf.int16)
* x=tf.Variable([1,2],tf.int16) * x=tf.constant([1.0,2.0],dtype=tf.float32) #### 转化 * tf.cast(x=x,tf.int32) 对于constant也可以改变数据类型
* tf.reshape(x,[1,10])  改变形状
* tf.expan_dims(x,2) 插入维度,shape from [1,2,3] to [1,2,1,3]
* tf.squeeze(t,[1,2]) 删除满足下标[1,2]的数据:[1,2,3,4]->[1,4]
#### 查看
* tf.rank(x) 获得阶数
* tf.TensorShape(x) 获得形状,元组形式
* x[:,3] python 切片语法
#### 常见类型
* tf.[int16,int32,float64,complex64,string,bool,uint8]
#### 基本运算
* tf.matmul(x,x)
* tf.reduce_sum
* tf.reduce_sum(x,0) 列方向上求和
* tf.reduce_sum(x,1) 行方向上求和
* tf.reduce_sum(x,1,keepdims=True) 行方向上求和,但是不会将维
* tf.reduce_sum(x) 总体求和
* tf.reduce_sum(x,[0,1]) 行列求和

## 模型存取
#### 创建
* saver=tf.tarin.Saver(tf.global_variables(),write_version=tf.train.SaverDef.V1)
#### 保存
* saver.save(sess,'my-model',global_step=100) ==>filename:mymodel-100
#### 恢复
saver.restore(sess,save_path)
#### 导出
* tf.train.export_meta_graph(filename='model.meta',as_text=True) 导出为文本格式

## logging
* tf.logging.info("this is a logging")
* tf.logging.set_verbosity(tf.logging.INFO) 输出日志信息

## rank
* 1:列
* 2:行

## padding
*  CONSTANT : 补零
* REFLECT 和 SYMMETRIC 两种对称方式
